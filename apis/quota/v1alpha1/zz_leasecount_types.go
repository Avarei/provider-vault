/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LeaseCountObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The maximum number of leases to be allowed by the quota rule. The max_leases must be positive.
	MaxLeases *float64 `json:"maxLeases,omitempty" tf:"max_leases,omitempty"`

	// The name of the quota.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Path of the mount or namespace to apply the quota. A blank path configures a global lease count quota.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type LeaseCountParameters struct {

	// The maximum number of leases to be allowed by the quota rule. The max_leases must be positive.
	// +kubebuilder:validation:Optional
	MaxLeases *float64 `json:"maxLeases,omitempty" tf:"max_leases,omitempty"`

	// The name of the quota.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Path of the mount or namespace to apply the quota. A blank path configures a global lease count quota.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

// LeaseCountSpec defines the desired state of LeaseCount
type LeaseCountSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LeaseCountParameters `json:"forProvider"`
}

// LeaseCountStatus defines the observed state of LeaseCount.
type LeaseCountStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LeaseCountObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LeaseCount is the Schema for the LeaseCounts API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type LeaseCount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.maxLeases)",message="maxLeases is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	Spec   LeaseCountSpec   `json:"spec"`
	Status LeaseCountStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LeaseCountList contains a list of LeaseCounts
type LeaseCountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LeaseCount `json:"items"`
}

// Repository type metadata.
var (
	LeaseCount_Kind             = "LeaseCount"
	LeaseCount_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LeaseCount_Kind}.String()
	LeaseCount_KindAPIVersion   = LeaseCount_Kind + "." + CRDGroupVersion.String()
	LeaseCount_GroupVersionKind = CRDGroupVersion.WithKind(LeaseCount_Kind)
)

func init() {
	SchemeBuilder.Register(&LeaseCount{}, &LeaseCountList{})
}
