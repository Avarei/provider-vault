/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SnapshotAgentConfigObservation struct {

	// AWS access key ID.
	AwsAccessKeyID *string `json:"awsAccessKeyId,omitempty" tf:"aws_access_key_id,omitempty"`

	// S3 bucket to write snapshots to.
	AwsS3Bucket *string `json:"awsS3Bucket,omitempty" tf:"aws_s3_bucket,omitempty"`

	// Disable TLS for the S3 endpoint. This should only be used for testing purposes.
	AwsS3DisableTLS *bool `json:"awsS3DisableTls,omitempty" tf:"aws_s3_disable_tls,omitempty"`

	// Use KMS to encrypt bucket contents.
	AwsS3EnableKMS *bool `json:"awsS3EnableKms,omitempty" tf:"aws_s3_enable_kms,omitempty"`

	// AWS endpoint. This is typically only set when using a non-AWS S3 implementation like Minio.
	AwsS3Endpoint *string `json:"awsS3Endpoint,omitempty" tf:"aws_s3_endpoint,omitempty"`

	// Use the endpoint/bucket URL style instead of bucket.endpoint.
	AwsS3ForcePathStyle *bool `json:"awsS3ForcePathStyle,omitempty" tf:"aws_s3_force_path_style,omitempty"`

	// Use named KMS key, when aws_s3_enable_kms=true
	AwsS3KMSKey *string `json:"awsS3KmsKey,omitempty" tf:"aws_s3_kms_key,omitempty"`

	// AWS region bucket is in.
	AwsS3Region *string `json:"awsS3Region,omitempty" tf:"aws_s3_region,omitempty"`

	// Use AES256 to encrypt bucket contents.
	AwsS3ServerSideEncryption *bool `json:"awsS3ServerSideEncryption,omitempty" tf:"aws_s3_server_side_encryption,omitempty"`

	// AWS secret access key.
	AwsSecretAccessKey *string `json:"awsSecretAccessKey,omitempty" tf:"aws_secret_access_key,omitempty"`

	// AWS session token.
	AwsSessionToken *string `json:"awsSessionToken,omitempty" tf:"aws_session_token,omitempty"`

	// Azure account key.
	AzureAccountKey *string `json:"azureAccountKey,omitempty" tf:"azure_account_key,omitempty"`

	// Azure account name.
	AzureAccountName *string `json:"azureAccountName,omitempty" tf:"azure_account_name,omitempty"`

	// Azure blob environment.
	AzureBlobEnvironment *string `json:"azureBlobEnvironment,omitempty" tf:"azure_blob_environment,omitempty"`

	// Azure container name to write snapshots to.
	AzureContainerName *string `json:"azureContainerName,omitempty" tf:"azure_container_name,omitempty"`

	// Azure blob storage endpoint. This is typically only set when using a non-Azure implementation like Azurite.
	AzureEndpoint *string `json:"azureEndpoint,omitempty" tf:"azure_endpoint,omitempty"`

	// The file or object name of snapshot files will start with this string.
	FilePrefix *string `json:"filePrefix,omitempty" tf:"file_prefix,omitempty"`

	// Disable TLS for the GCS endpoint.
	GoogleDisableTLS *bool `json:"googleDisableTls,omitempty" tf:"google_disable_tls,omitempty"`

	// GCS endpoint. This is typically only set when using a non-Google GCS implementation like fake-gcs-server.
	GoogleEndpoint *string `json:"googleEndpoint,omitempty" tf:"google_endpoint,omitempty"`

	// GCS bucket to write snapshots to.
	GoogleGcsBucket *string `json:"googleGcsBucket,omitempty" tf:"google_gcs_bucket,omitempty"`

	// Google service account key in JSON format.
	GoogleServiceAccountKey *string `json:"googleServiceAccountKey,omitempty" tf:"google_service_account_key,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Number of seconds between snapshots.
	IntervalSeconds *float64 `json:"intervalSeconds,omitempty" tf:"interval_seconds,omitempty"`

	// The maximum space, in bytes, to use for snapshots.
	LocalMaxSpace *float64 `json:"localMaxSpace,omitempty" tf:"local_max_space,omitempty"`

	// Name of the snapshot agent configuration.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The directory or bucket prefix to to use.
	PathPrefix *string `json:"pathPrefix,omitempty" tf:"path_prefix,omitempty"`

	// How many snapshots are to be kept.
	Retain *float64 `json:"retain,omitempty" tf:"retain,omitempty"`

	// What storage service to send snapshots to. One of "local", "azure-blob", "aws-s3", or "google-gcs".
	StorageType *string `json:"storageType,omitempty" tf:"storage_type,omitempty"`
}

type SnapshotAgentConfigParameters struct {

	// AWS access key ID.
	// +kubebuilder:validation:Optional
	AwsAccessKeyID *string `json:"awsAccessKeyId,omitempty" tf:"aws_access_key_id,omitempty"`

	// S3 bucket to write snapshots to.
	// +kubebuilder:validation:Optional
	AwsS3Bucket *string `json:"awsS3Bucket,omitempty" tf:"aws_s3_bucket,omitempty"`

	// Disable TLS for the S3 endpoint. This should only be used for testing purposes.
	// +kubebuilder:validation:Optional
	AwsS3DisableTLS *bool `json:"awsS3DisableTls,omitempty" tf:"aws_s3_disable_tls,omitempty"`

	// Use KMS to encrypt bucket contents.
	// +kubebuilder:validation:Optional
	AwsS3EnableKMS *bool `json:"awsS3EnableKms,omitempty" tf:"aws_s3_enable_kms,omitempty"`

	// AWS endpoint. This is typically only set when using a non-AWS S3 implementation like Minio.
	// +kubebuilder:validation:Optional
	AwsS3Endpoint *string `json:"awsS3Endpoint,omitempty" tf:"aws_s3_endpoint,omitempty"`

	// Use the endpoint/bucket URL style instead of bucket.endpoint.
	// +kubebuilder:validation:Optional
	AwsS3ForcePathStyle *bool `json:"awsS3ForcePathStyle,omitempty" tf:"aws_s3_force_path_style,omitempty"`

	// Use named KMS key, when aws_s3_enable_kms=true
	// +kubebuilder:validation:Optional
	AwsS3KMSKey *string `json:"awsS3KmsKey,omitempty" tf:"aws_s3_kms_key,omitempty"`

	// AWS region bucket is in.
	// +kubebuilder:validation:Optional
	AwsS3Region *string `json:"awsS3Region,omitempty" tf:"aws_s3_region,omitempty"`

	// Use AES256 to encrypt bucket contents.
	// +kubebuilder:validation:Optional
	AwsS3ServerSideEncryption *bool `json:"awsS3ServerSideEncryption,omitempty" tf:"aws_s3_server_side_encryption,omitempty"`

	// AWS secret access key.
	// +kubebuilder:validation:Optional
	AwsSecretAccessKey *string `json:"awsSecretAccessKey,omitempty" tf:"aws_secret_access_key,omitempty"`

	// AWS session token.
	// +kubebuilder:validation:Optional
	AwsSessionToken *string `json:"awsSessionToken,omitempty" tf:"aws_session_token,omitempty"`

	// Azure account key.
	// +kubebuilder:validation:Optional
	AzureAccountKey *string `json:"azureAccountKey,omitempty" tf:"azure_account_key,omitempty"`

	// Azure account name.
	// +kubebuilder:validation:Optional
	AzureAccountName *string `json:"azureAccountName,omitempty" tf:"azure_account_name,omitempty"`

	// Azure blob environment.
	// +kubebuilder:validation:Optional
	AzureBlobEnvironment *string `json:"azureBlobEnvironment,omitempty" tf:"azure_blob_environment,omitempty"`

	// Azure container name to write snapshots to.
	// +kubebuilder:validation:Optional
	AzureContainerName *string `json:"azureContainerName,omitempty" tf:"azure_container_name,omitempty"`

	// Azure blob storage endpoint. This is typically only set when using a non-Azure implementation like Azurite.
	// +kubebuilder:validation:Optional
	AzureEndpoint *string `json:"azureEndpoint,omitempty" tf:"azure_endpoint,omitempty"`

	// The file or object name of snapshot files will start with this string.
	// +kubebuilder:validation:Optional
	FilePrefix *string `json:"filePrefix,omitempty" tf:"file_prefix,omitempty"`

	// Disable TLS for the GCS endpoint.
	// +kubebuilder:validation:Optional
	GoogleDisableTLS *bool `json:"googleDisableTls,omitempty" tf:"google_disable_tls,omitempty"`

	// GCS endpoint. This is typically only set when using a non-Google GCS implementation like fake-gcs-server.
	// +kubebuilder:validation:Optional
	GoogleEndpoint *string `json:"googleEndpoint,omitempty" tf:"google_endpoint,omitempty"`

	// GCS bucket to write snapshots to.
	// +kubebuilder:validation:Optional
	GoogleGcsBucket *string `json:"googleGcsBucket,omitempty" tf:"google_gcs_bucket,omitempty"`

	// Google service account key in JSON format.
	// +kubebuilder:validation:Optional
	GoogleServiceAccountKey *string `json:"googleServiceAccountKey,omitempty" tf:"google_service_account_key,omitempty"`

	// Number of seconds between snapshots.
	// +kubebuilder:validation:Optional
	IntervalSeconds *float64 `json:"intervalSeconds,omitempty" tf:"interval_seconds,omitempty"`

	// The maximum space, in bytes, to use for snapshots.
	// +kubebuilder:validation:Optional
	LocalMaxSpace *float64 `json:"localMaxSpace,omitempty" tf:"local_max_space,omitempty"`

	// Name of the snapshot agent configuration.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The directory or bucket prefix to to use.
	// +kubebuilder:validation:Optional
	PathPrefix *string `json:"pathPrefix,omitempty" tf:"path_prefix,omitempty"`

	// How many snapshots are to be kept.
	// +kubebuilder:validation:Optional
	Retain *float64 `json:"retain,omitempty" tf:"retain,omitempty"`

	// What storage service to send snapshots to. One of "local", "azure-blob", "aws-s3", or "google-gcs".
	// +kubebuilder:validation:Optional
	StorageType *string `json:"storageType,omitempty" tf:"storage_type,omitempty"`
}

// SnapshotAgentConfigSpec defines the desired state of SnapshotAgentConfig
type SnapshotAgentConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SnapshotAgentConfigParameters `json:"forProvider"`
}

// SnapshotAgentConfigStatus defines the observed state of SnapshotAgentConfig.
type SnapshotAgentConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SnapshotAgentConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SnapshotAgentConfig is the Schema for the SnapshotAgentConfigs API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type SnapshotAgentConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.intervalSeconds)",message="intervalSeconds is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.pathPrefix)",message="pathPrefix is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.storageType)",message="storageType is a required parameter"
	Spec   SnapshotAgentConfigSpec   `json:"spec"`
	Status SnapshotAgentConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SnapshotAgentConfigList contains a list of SnapshotAgentConfigs
type SnapshotAgentConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SnapshotAgentConfig `json:"items"`
}

// Repository type metadata.
var (
	SnapshotAgentConfig_Kind             = "SnapshotAgentConfig"
	SnapshotAgentConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SnapshotAgentConfig_Kind}.String()
	SnapshotAgentConfig_KindAPIVersion   = SnapshotAgentConfig_Kind + "." + CRDGroupVersion.String()
	SnapshotAgentConfig_GroupVersionKind = CRDGroupVersion.WithKind(SnapshotAgentConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&SnapshotAgentConfig{}, &SnapshotAgentConfigList{})
}
