/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PluginInitParameters struct {

	// List of additional args to pass to the plugin.
	// List of additional arguments to pass to the plugin.
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// Command to execute the plugin, relative to the server's configured plugin_directory.
	// Command to execute the plugin, relative to the plugin_directory.
	Command *string `json:"command,omitempty" tf:"command,omitempty"`

	Env []*string `json:"envSecretRef,omitempty" tf:"-"`

	// Name of the plugin.
	// Name of the plugin.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies OCI image to run. If specified, setting
	// command, args, and env will update the container's entrypoint, args, and
	// environment variables (append-only) respectively.
	// OCI image to run. If specified, setting command, args, and env will update the container's entrypoint, args, and environment variables (append-only) respectively.
	OciImage *string `json:"ociImage,omitempty" tf:"oci_image,omitempty"`

	// Vault plugin runtime to use if oci_image is specified.
	// Vault plugin runtime to use if oci_image is specified.
	Runtime *string `json:"runtime,omitempty" tf:"runtime,omitempty"`

	// SHA256 sum of the plugin binary.
	// SHA256 sum of the plugin binary.
	Sha256 *string `json:"sha256,omitempty" tf:"sha256,omitempty"`

	// Type of plugin; one of "auth", "secret", or "database".
	// Type of plugin; one of "auth", "secret", or "database".
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Semantic version of the plugin.
	// Semantic version of the plugin.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type PluginObservation struct {

	// List of additional args to pass to the plugin.
	// List of additional arguments to pass to the plugin.
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// Command to execute the plugin, relative to the server's configured plugin_directory.
	// Command to execute the plugin, relative to the plugin_directory.
	Command *string `json:"command,omitempty" tf:"command,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of the plugin.
	// Name of the plugin.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies OCI image to run. If specified, setting
	// command, args, and env will update the container's entrypoint, args, and
	// environment variables (append-only) respectively.
	// OCI image to run. If specified, setting command, args, and env will update the container's entrypoint, args, and environment variables (append-only) respectively.
	OciImage *string `json:"ociImage,omitempty" tf:"oci_image,omitempty"`

	// Vault plugin runtime to use if oci_image is specified.
	// Vault plugin runtime to use if oci_image is specified.
	Runtime *string `json:"runtime,omitempty" tf:"runtime,omitempty"`

	// SHA256 sum of the plugin binary.
	// SHA256 sum of the plugin binary.
	Sha256 *string `json:"sha256,omitempty" tf:"sha256,omitempty"`

	// Type of plugin; one of "auth", "secret", or "database".
	// Type of plugin; one of "auth", "secret", or "database".
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Semantic version of the plugin.
	// Semantic version of the plugin.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type PluginParameters struct {

	// List of additional args to pass to the plugin.
	// List of additional arguments to pass to the plugin.
	// +kubebuilder:validation:Optional
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// Command to execute the plugin, relative to the server's configured plugin_directory.
	// Command to execute the plugin, relative to the plugin_directory.
	// +kubebuilder:validation:Optional
	Command *string `json:"command,omitempty" tf:"command,omitempty"`

	// List of additional environment variables to run the plugin with in KEY=VALUE form.
	// List of additional environment variables to run the plugin with in KEY=VALUE form.
	// +kubebuilder:validation:Optional
	EnvSecretRef *[]v1.SecretKeySelector `json:"envSecretRef,omitempty" tf:"-"`

	// Name of the plugin.
	// Name of the plugin.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies OCI image to run. If specified, setting
	// command, args, and env will update the container's entrypoint, args, and
	// environment variables (append-only) respectively.
	// OCI image to run. If specified, setting command, args, and env will update the container's entrypoint, args, and environment variables (append-only) respectively.
	// +kubebuilder:validation:Optional
	OciImage *string `json:"ociImage,omitempty" tf:"oci_image,omitempty"`

	// Vault plugin runtime to use if oci_image is specified.
	// Vault plugin runtime to use if oci_image is specified.
	// +kubebuilder:validation:Optional
	Runtime *string `json:"runtime,omitempty" tf:"runtime,omitempty"`

	// SHA256 sum of the plugin binary.
	// SHA256 sum of the plugin binary.
	// +kubebuilder:validation:Optional
	Sha256 *string `json:"sha256,omitempty" tf:"sha256,omitempty"`

	// Type of plugin; one of "auth", "secret", or "database".
	// Type of plugin; one of "auth", "secret", or "database".
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Semantic version of the plugin.
	// Semantic version of the plugin.
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

// PluginSpec defines the desired state of Plugin
type PluginSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PluginParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PluginInitParameters `json:"initProvider,omitempty"`
}

// PluginStatus defines the observed state of Plugin.
type PluginStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PluginObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Plugin is the Schema for the Plugins API. Manage external plugins registered in the plugin catalog.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type Plugin struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.command) || (has(self.initProvider) && has(self.initProvider.command))",message="spec.forProvider.command is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sha256) || (has(self.initProvider) && has(self.initProvider.sha256))",message="spec.forProvider.sha256 is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   PluginSpec   `json:"spec"`
	Status PluginStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PluginList contains a list of Plugins
type PluginList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Plugin `json:"items"`
}

// Repository type metadata.
var (
	Plugin_Kind             = "Plugin"
	Plugin_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Plugin_Kind}.String()
	Plugin_KindAPIVersion   = Plugin_Kind + "." + CRDGroupVersion.String()
	Plugin_GroupVersionKind = CRDGroupVersion.WithKind(Plugin_Kind)
)

func init() {
	SchemeBuilder.Register(&Plugin{}, &PluginList{})
}
