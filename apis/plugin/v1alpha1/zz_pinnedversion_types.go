/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PinnedVersionInitParameters struct {

	// Name of the plugin.
	// Name of the plugin.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Type of plugin; one of "auth", "secret", or "database".
	// Type of plugin; one of "auth", "secret", or "database".
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Semantic version of the plugin to pin.
	// Semantic pinned plugin version.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type PinnedVersionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of the plugin.
	// Name of the plugin.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Type of plugin; one of "auth", "secret", or "database".
	// Type of plugin; one of "auth", "secret", or "database".
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Semantic version of the plugin to pin.
	// Semantic pinned plugin version.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type PinnedVersionParameters struct {

	// Name of the plugin.
	// Name of the plugin.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Type of plugin; one of "auth", "secret", or "database".
	// Type of plugin; one of "auth", "secret", or "database".
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Semantic version of the plugin to pin.
	// Semantic pinned plugin version.
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

// PinnedVersionSpec defines the desired state of PinnedVersion
type PinnedVersionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PinnedVersionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PinnedVersionInitParameters `json:"initProvider,omitempty"`
}

// PinnedVersionStatus defines the observed state of PinnedVersion.
type PinnedVersionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PinnedVersionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PinnedVersion is the Schema for the PinnedVersions API. Manage pinned plugin version registered in the plugin catalog.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type PinnedVersion struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.version) || (has(self.initProvider) && has(self.initProvider.version))",message="spec.forProvider.version is a required parameter"
	Spec   PinnedVersionSpec   `json:"spec"`
	Status PinnedVersionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PinnedVersionList contains a list of PinnedVersions
type PinnedVersionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PinnedVersion `json:"items"`
}

// Repository type metadata.
var (
	PinnedVersion_Kind             = "PinnedVersion"
	PinnedVersion_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PinnedVersion_Kind}.String()
	PinnedVersion_KindAPIVersion   = PinnedVersion_Kind + "." + CRDGroupVersion.String()
	PinnedVersion_GroupVersionKind = CRDGroupVersion.WithKind(PinnedVersion_Kind)
)

func init() {
	SchemeBuilder.Register(&PinnedVersion{}, &PinnedVersionList{})
}
