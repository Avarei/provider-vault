/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BindingObservation struct {

	// Resource name
	Resource *string `json:"resource,omitempty" tf:"resource,omitempty"`

	// List of roles to apply to the resource
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`
}

type BindingParameters struct {

	// Resource name
	// +kubebuilder:validation:Required
	Resource *string `json:"resource" tf:"resource,omitempty"`

	// List of roles to apply to the resource
	// +kubebuilder:validation:Required
	Roles []*string `json:"roles" tf:"roles,omitempty"`
}

type SecretRolesetObservation struct {

	// Path where the GCP secrets engine is mounted.
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	Binding []BindingObservation `json:"binding,omitempty" tf:"binding,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Name of the GCP project that this roleset's service account will belong to.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Name of the RoleSet to create
	Roleset *string `json:"roleset,omitempty" tf:"roleset,omitempty"`

	// Type of secret generated for this role set. Defaults to `access_token`. Accepted values: `access_token`, `service_account_key`
	SecretType *string `json:"secretType,omitempty" tf:"secret_type,omitempty"`

	// Email of the service account created by Vault for this Roleset
	ServiceAccountEmail *string `json:"serviceAccountEmail,omitempty" tf:"service_account_email,omitempty"`

	// List of OAuth scopes to assign to `access_token` secrets generated under this role set (`access_token` role sets only)
	TokenScopes []*string `json:"tokenScopes,omitempty" tf:"token_scopes,omitempty"`
}

type SecretRolesetParameters struct {

	// Path where the GCP secrets engine is mounted.
	// +kubebuilder:validation:Optional
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// +kubebuilder:validation:Optional
	Binding []BindingParameters `json:"binding,omitempty" tf:"binding,omitempty"`

	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Name of the GCP project that this roleset's service account will belong to.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Name of the RoleSet to create
	// +kubebuilder:validation:Optional
	Roleset *string `json:"roleset,omitempty" tf:"roleset,omitempty"`

	// Type of secret generated for this role set. Defaults to `access_token`. Accepted values: `access_token`, `service_account_key`
	// +kubebuilder:validation:Optional
	SecretType *string `json:"secretType,omitempty" tf:"secret_type,omitempty"`

	// List of OAuth scopes to assign to `access_token` secrets generated under this role set (`access_token` role sets only)
	// +kubebuilder:validation:Optional
	TokenScopes []*string `json:"tokenScopes,omitempty" tf:"token_scopes,omitempty"`
}

// SecretRolesetSpec defines the desired state of SecretRoleset
type SecretRolesetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecretRolesetParameters `json:"forProvider"`
}

// SecretRolesetStatus defines the observed state of SecretRoleset.
type SecretRolesetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecretRolesetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SecretRoleset is the Schema for the SecretRolesets API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type SecretRoleset struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.backend)",message="backend is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.binding)",message="binding is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.project)",message="project is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.roleset)",message="roleset is a required parameter"
	Spec   SecretRolesetSpec   `json:"spec"`
	Status SecretRolesetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecretRolesetList contains a list of SecretRolesets
type SecretRolesetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecretRoleset `json:"items"`
}

// Repository type metadata.
var (
	SecretRoleset_Kind             = "SecretRoleset"
	SecretRoleset_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecretRoleset_Kind}.String()
	SecretRoleset_KindAPIVersion   = SecretRoleset_Kind + "." + CRDGroupVersion.String()
	SecretRoleset_GroupVersionKind = CRDGroupVersion.WithKind(SecretRoleset_Kind)
)

func init() {
	SchemeBuilder.Register(&SecretRoleset{}, &SecretRolesetList{})
}
