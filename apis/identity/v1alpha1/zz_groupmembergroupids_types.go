/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GroupMemberGroupIdsObservation struct {

	// If set to true, allows the resource to manage member group ids
	// exclusively. Beware of race conditions when disabling exclusive management
	Exclusive *bool `json:"exclusive,omitempty" tf:"exclusive,omitempty"`

	// ID of the group.
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Group IDs to be assigned as group members.
	MemberGroupIds []*string `json:"memberGroupIds,omitempty" tf:"member_group_ids,omitempty"`

	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type GroupMemberGroupIdsParameters struct {

	// If set to true, allows the resource to manage member group ids
	// exclusively. Beware of race conditions when disabling exclusive management
	// +kubebuilder:validation:Optional
	Exclusive *bool `json:"exclusive,omitempty" tf:"exclusive,omitempty"`

	// ID of the group.
	// +kubebuilder:validation:Optional
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// Group IDs to be assigned as group members.
	// +kubebuilder:validation:Optional
	MemberGroupIds []*string `json:"memberGroupIds,omitempty" tf:"member_group_ids,omitempty"`

	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

// GroupMemberGroupIdsSpec defines the desired state of GroupMemberGroupIds
type GroupMemberGroupIdsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GroupMemberGroupIdsParameters `json:"forProvider"`
}

// GroupMemberGroupIdsStatus defines the observed state of GroupMemberGroupIds.
type GroupMemberGroupIdsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupMemberGroupIdsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GroupMemberGroupIds is the Schema for the GroupMemberGroupIdss API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type GroupMemberGroupIds struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.groupId)",message="groupId is a required parameter"
	Spec   GroupMemberGroupIdsSpec   `json:"spec"`
	Status GroupMemberGroupIdsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupMemberGroupIdsList contains a list of GroupMemberGroupIdss
type GroupMemberGroupIdsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GroupMemberGroupIds `json:"items"`
}

// Repository type metadata.
var (
	GroupMemberGroupIds_Kind             = "GroupMemberGroupIds"
	GroupMemberGroupIds_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GroupMemberGroupIds_Kind}.String()
	GroupMemberGroupIds_KindAPIVersion   = GroupMemberGroupIds_Kind + "." + CRDGroupVersion.String()
	GroupMemberGroupIds_GroupVersionKind = CRDGroupVersion.WithKind(GroupMemberGroupIds_Kind)
)

func init() {
	SchemeBuilder.Register(&GroupMemberGroupIds{}, &GroupMemberGroupIdsList{})
}
