/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecretBackendStaticRoleObservation struct {

	// The path of the Database Secret Backend the role belongs to.
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Database connection to use for this role.
	DBName *string `json:"dbName,omitempty" tf:"db_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Unique name for the static role.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The amount of time Vault should wait before rotating the password, in seconds.
	RotationPeriod *float64 `json:"rotationPeriod,omitempty" tf:"rotation_period,omitempty"`

	// Database statements to execute to rotate the password for the configured database user.
	RotationStatements []*string `json:"rotationStatements,omitempty" tf:"rotation_statements,omitempty"`

	// The database username that this role corresponds to.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type SecretBackendStaticRoleParameters struct {

	// The path of the Database Secret Backend the role belongs to.
	// +kubebuilder:validation:Optional
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Database connection to use for this role.
	// +kubebuilder:validation:Optional
	DBName *string `json:"dbName,omitempty" tf:"db_name,omitempty"`

	// Unique name for the static role.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The amount of time Vault should wait before rotating the password, in seconds.
	// +kubebuilder:validation:Optional
	RotationPeriod *float64 `json:"rotationPeriod,omitempty" tf:"rotation_period,omitempty"`

	// Database statements to execute to rotate the password for the configured database user.
	// +kubebuilder:validation:Optional
	RotationStatements []*string `json:"rotationStatements,omitempty" tf:"rotation_statements,omitempty"`

	// The database username that this role corresponds to.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

// SecretBackendStaticRoleSpec defines the desired state of SecretBackendStaticRole
type SecretBackendStaticRoleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecretBackendStaticRoleParameters `json:"forProvider"`
}

// SecretBackendStaticRoleStatus defines the observed state of SecretBackendStaticRole.
type SecretBackendStaticRoleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecretBackendStaticRoleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SecretBackendStaticRole is the Schema for the SecretBackendStaticRoles API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type SecretBackendStaticRole struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.backend)",message="backend is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.dbName)",message="dbName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.rotationPeriod)",message="rotationPeriod is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.username)",message="username is a required parameter"
	Spec   SecretBackendStaticRoleSpec   `json:"spec"`
	Status SecretBackendStaticRoleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecretBackendStaticRoleList contains a list of SecretBackendStaticRoles
type SecretBackendStaticRoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecretBackendStaticRole `json:"items"`
}

// Repository type metadata.
var (
	SecretBackendStaticRole_Kind             = "SecretBackendStaticRole"
	SecretBackendStaticRole_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecretBackendStaticRole_Kind}.String()
	SecretBackendStaticRole_KindAPIVersion   = SecretBackendStaticRole_Kind + "." + CRDGroupVersion.String()
	SecretBackendStaticRole_GroupVersionKind = CRDGroupVersion.WithKind(SecretBackendStaticRole_Kind)
)

func init() {
	SchemeBuilder.Register(&SecretBackendStaticRole{}, &SecretBackendStaticRoleList{})
}
