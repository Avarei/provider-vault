/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TokenObservation struct {

	// The display name of the token.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The explicit max TTL of the token.
	ExplicitMaxTTL *string `json:"explicitMaxTtl,omitempty" tf:"explicit_max_ttl,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The token lease duration.
	LeaseDuration *float64 `json:"leaseDuration,omitempty" tf:"lease_duration,omitempty"`

	// The token lease started on.
	LeaseStarted *string `json:"leaseStarted,omitempty" tf:"lease_started,omitempty"`

	// Metadata to be associated with the token.
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Flag to disable the default policy.
	NoDefaultPolicy *bool `json:"noDefaultPolicy,omitempty" tf:"no_default_policy,omitempty"`

	// Flag to create a token without parent.
	NoParent *bool `json:"noParent,omitempty" tf:"no_parent,omitempty"`

	// The number of allowed uses of the token.
	NumUses *float64 `json:"numUses,omitempty" tf:"num_uses,omitempty"`

	// The period of the token.
	Period *string `json:"period,omitempty" tf:"period,omitempty"`

	// List of policies.
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`

	// The renew increment.
	RenewIncrement *float64 `json:"renewIncrement,omitempty" tf:"renew_increment,omitempty"`

	// The minimum lease to renew token.
	RenewMinLease *float64 `json:"renewMinLease,omitempty" tf:"renew_min_lease,omitempty"`

	// Flag to allow the token to be renewed
	Renewable *bool `json:"renewable,omitempty" tf:"renewable,omitempty"`

	// The token role name.
	RoleName *string `json:"roleName,omitempty" tf:"role_name,omitempty"`

	// The TTL period of the token.
	TTL *string `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// The TTL period of the wrapped token.
	WrappingTTL *string `json:"wrappingTtl,omitempty" tf:"wrapping_ttl,omitempty"`
}

type TokenParameters struct {

	// The display name of the token.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The explicit max TTL of the token.
	// +kubebuilder:validation:Optional
	ExplicitMaxTTL *string `json:"explicitMaxTtl,omitempty" tf:"explicit_max_ttl,omitempty"`

	// Metadata to be associated with the token.
	// +kubebuilder:validation:Optional
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Flag to disable the default policy.
	// +kubebuilder:validation:Optional
	NoDefaultPolicy *bool `json:"noDefaultPolicy,omitempty" tf:"no_default_policy,omitempty"`

	// Flag to create a token without parent.
	// +kubebuilder:validation:Optional
	NoParent *bool `json:"noParent,omitempty" tf:"no_parent,omitempty"`

	// The number of allowed uses of the token.
	// +kubebuilder:validation:Optional
	NumUses *float64 `json:"numUses,omitempty" tf:"num_uses,omitempty"`

	// The period of the token.
	// +kubebuilder:validation:Optional
	Period *string `json:"period,omitempty" tf:"period,omitempty"`

	// List of policies.
	// +kubebuilder:validation:Optional
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`

	// The renew increment.
	// +kubebuilder:validation:Optional
	RenewIncrement *float64 `json:"renewIncrement,omitempty" tf:"renew_increment,omitempty"`

	// The minimum lease to renew token.
	// +kubebuilder:validation:Optional
	RenewMinLease *float64 `json:"renewMinLease,omitempty" tf:"renew_min_lease,omitempty"`

	// Flag to allow the token to be renewed
	// +kubebuilder:validation:Optional
	Renewable *bool `json:"renewable,omitempty" tf:"renewable,omitempty"`

	// The token role name.
	// +kubebuilder:validation:Optional
	RoleName *string `json:"roleName,omitempty" tf:"role_name,omitempty"`

	// The TTL period of the token.
	// +kubebuilder:validation:Optional
	TTL *string `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// The TTL period of the wrapped token.
	// +kubebuilder:validation:Optional
	WrappingTTL *string `json:"wrappingTtl,omitempty" tf:"wrapping_ttl,omitempty"`
}

// TokenSpec defines the desired state of Token
type TokenSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TokenParameters `json:"forProvider"`
}

// TokenStatus defines the observed state of Token.
type TokenStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TokenObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Token is the Schema for the Tokens API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type Token struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TokenSpec   `json:"spec"`
	Status            TokenStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TokenList contains a list of Tokens
type TokenList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Token `json:"items"`
}

// Repository type metadata.
var (
	Token_Kind             = "Token"
	Token_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Token_Kind}.String()
	Token_KindAPIVersion   = Token_Kind + "." + CRDGroupVersion.String()
	Token_GroupVersionKind = CRDGroupVersion.WithKind(Token_Kind)
)

func init() {
	SchemeBuilder.Register(&Token{}, &TokenList{})
}
