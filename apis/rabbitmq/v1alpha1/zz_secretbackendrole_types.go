/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecretBackendRoleObservation struct {

	// The path of the Rabbitmq Secret Backend the role belongs to.
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Unique name for the role.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Specifies a comma-separated RabbitMQ management tags.
	Tags *string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies a map of virtual hosts to permissions.
	Vhost []VhostObservation `json:"vhost,omitempty" tf:"vhost,omitempty"`

	// Specifies a map of virtual hosts and exchanges to topic permissions. This option requires RabbitMQ 3.7.0 or later.
	VhostTopic []VhostTopicObservation `json:"vhostTopic,omitempty" tf:"vhost_topic,omitempty"`
}

type SecretBackendRoleParameters struct {

	// The path of the Rabbitmq Secret Backend the role belongs to.
	// +kubebuilder:validation:Optional
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Unique name for the role.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Specifies a comma-separated RabbitMQ management tags.
	// +kubebuilder:validation:Optional
	Tags *string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies a map of virtual hosts to permissions.
	// +kubebuilder:validation:Optional
	Vhost []VhostParameters `json:"vhost,omitempty" tf:"vhost,omitempty"`

	// Specifies a map of virtual hosts and exchanges to topic permissions. This option requires RabbitMQ 3.7.0 or later.
	// +kubebuilder:validation:Optional
	VhostTopic []VhostTopicParameters `json:"vhostTopic,omitempty" tf:"vhost_topic,omitempty"`
}

type VhostObservation struct {

	// The configure permissions for this vhost.
	Configure *string `json:"configure,omitempty" tf:"configure,omitempty"`

	// The vhost to set permissions for.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// The read permissions for this vhost.
	Read *string `json:"read,omitempty" tf:"read,omitempty"`

	// The write permissions for this vhost.
	Write *string `json:"write,omitempty" tf:"write,omitempty"`
}

type VhostParameters struct {

	// The configure permissions for this vhost.
	// +kubebuilder:validation:Required
	Configure *string `json:"configure" tf:"configure,omitempty"`

	// The vhost to set permissions for.
	// +kubebuilder:validation:Required
	Host *string `json:"host" tf:"host,omitempty"`

	// The read permissions for this vhost.
	// +kubebuilder:validation:Required
	Read *string `json:"read" tf:"read,omitempty"`

	// The write permissions for this vhost.
	// +kubebuilder:validation:Required
	Write *string `json:"write" tf:"write,omitempty"`
}

type VhostTopicObservation struct {

	// The vhost to set permissions for.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// Specifies a map of virtual hosts to permissions.
	Vhost []VhostTopicVhostObservation `json:"vhost,omitempty" tf:"vhost,omitempty"`
}

type VhostTopicParameters struct {

	// The vhost to set permissions for.
	// +kubebuilder:validation:Required
	Host *string `json:"host" tf:"host,omitempty"`

	// Specifies a map of virtual hosts to permissions.
	// +kubebuilder:validation:Optional
	Vhost []VhostTopicVhostParameters `json:"vhost,omitempty" tf:"vhost,omitempty"`
}

type VhostTopicVhostObservation struct {

	// The read permissions for this vhost.
	Read *string `json:"read,omitempty" tf:"read,omitempty"`

	// The vhost to set permissions for.
	Topic *string `json:"topic,omitempty" tf:"topic,omitempty"`

	// The write permissions for this vhost.
	Write *string `json:"write,omitempty" tf:"write,omitempty"`
}

type VhostTopicVhostParameters struct {

	// The read permissions for this vhost.
	// +kubebuilder:validation:Required
	Read *string `json:"read" tf:"read,omitempty"`

	// The vhost to set permissions for.
	// +kubebuilder:validation:Required
	Topic *string `json:"topic" tf:"topic,omitempty"`

	// The write permissions for this vhost.
	// +kubebuilder:validation:Required
	Write *string `json:"write" tf:"write,omitempty"`
}

// SecretBackendRoleSpec defines the desired state of SecretBackendRole
type SecretBackendRoleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecretBackendRoleParameters `json:"forProvider"`
}

// SecretBackendRoleStatus defines the observed state of SecretBackendRole.
type SecretBackendRoleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecretBackendRoleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SecretBackendRole is the Schema for the SecretBackendRoles API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type SecretBackendRole struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.backend)",message="backend is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	Spec   SecretBackendRoleSpec   `json:"spec"`
	Status SecretBackendRoleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecretBackendRoleList contains a list of SecretBackendRoles
type SecretBackendRoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecretBackendRole `json:"items"`
}

// Repository type metadata.
var (
	SecretBackendRole_Kind             = "SecretBackendRole"
	SecretBackendRole_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecretBackendRole_Kind}.String()
	SecretBackendRole_KindAPIVersion   = SecretBackendRole_Kind + "." + CRDGroupVersion.String()
	SecretBackendRole_GroupVersionKind = CRDGroupVersion.WithKind(SecretBackendRole_Kind)
)

func init() {
	SchemeBuilder.Register(&SecretBackendRole{}, &SecretBackendRoleList{})
}
