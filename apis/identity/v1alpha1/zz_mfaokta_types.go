/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MfaOktaObservation struct {

	// The base domain to use for API requests.
	BaseURL *string `json:"baseUrl,omitempty" tf:"base_url,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Method ID.
	MethodID *string `json:"methodId,omitempty" tf:"method_id,omitempty"`

	// Mount accessor.
	MountAccessor *string `json:"mountAccessor,omitempty" tf:"mount_accessor,omitempty"`

	// Method name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Method's namespace ID.
	NamespaceID *string `json:"namespaceId,omitempty" tf:"namespace_id,omitempty"`

	// Method's namespace path.
	NamespacePath *string `json:"namespacePath,omitempty" tf:"namespace_path,omitempty"`

	// Name of the organization to be used in the Okta API.
	OrgName *string `json:"orgName,omitempty" tf:"org_name,omitempty"`

	// Only match the primary email for the account.
	PrimaryEmail *bool `json:"primaryEmail,omitempty" tf:"primary_email,omitempty"`

	// MFA type.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Resource UUID.
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	// A template string for mapping Identity names to MFA methods.
	UsernameFormat *string `json:"usernameFormat,omitempty" tf:"username_format,omitempty"`
}

type MfaOktaParameters struct {

	// Okta API token.
	// +kubebuilder:validation:Optional
	APITokenSecretRef v1.SecretKeySelector `json:"apiTokenSecretRef" tf:"-"`

	// The base domain to use for API requests.
	// +kubebuilder:validation:Optional
	BaseURL *string `json:"baseUrl,omitempty" tf:"base_url,omitempty"`

	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Name of the organization to be used in the Okta API.
	// +kubebuilder:validation:Optional
	OrgName *string `json:"orgName,omitempty" tf:"org_name,omitempty"`

	// Only match the primary email for the account.
	// +kubebuilder:validation:Optional
	PrimaryEmail *bool `json:"primaryEmail,omitempty" tf:"primary_email,omitempty"`

	// A template string for mapping Identity names to MFA methods.
	// +kubebuilder:validation:Optional
	UsernameFormat *string `json:"usernameFormat,omitempty" tf:"username_format,omitempty"`
}

// MfaOktaSpec defines the desired state of MfaOkta
type MfaOktaSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MfaOktaParameters `json:"forProvider"`
}

// MfaOktaStatus defines the observed state of MfaOkta.
type MfaOktaStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MfaOktaObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MfaOkta is the Schema for the MfaOktas API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type MfaOkta struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.apiTokenSecretRef)",message="apiTokenSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.orgName)",message="orgName is a required parameter"
	Spec   MfaOktaSpec   `json:"spec"`
	Status MfaOktaStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MfaOktaList contains a list of MfaOktas
type MfaOktaList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MfaOkta `json:"items"`
}

// Repository type metadata.
var (
	MfaOkta_Kind             = "MfaOkta"
	MfaOkta_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MfaOkta_Kind}.String()
	MfaOkta_KindAPIVersion   = MfaOkta_Kind + "." + CRDGroupVersion.String()
	MfaOkta_GroupVersionKind = CRDGroupVersion.WithKind(MfaOkta_Kind)
)

func init() {
	SchemeBuilder.Register(&MfaOkta{}, &MfaOktaList{})
}
