/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OktaObservation struct {

	// If set, will be used as the base domain for API requests.
	BaseURL *string `json:"baseUrl,omitempty" tf:"base_url,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The mount to tie this method to for use in automatic mappings. The mapping will use the Name field of Aliases associated with this mount as the username in the mapping.
	MountAccessor *string `json:"mountAccessor,omitempty" tf:"mount_accessor,omitempty"`

	// Name of the MFA method.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Name of the organization to be used in the Okta API.
	OrgName *string `json:"orgName,omitempty" tf:"org_name,omitempty"`

	// If set to true, the username will only match the primary email for the account.
	PrimaryEmail *bool `json:"primaryEmail,omitempty" tf:"primary_email,omitempty"`

	// A format string for mapping Identity names to MFA method names. Values to substitute should be placed in `{{}}`.
	UsernameFormat *string `json:"usernameFormat,omitempty" tf:"username_format,omitempty"`
}

type OktaParameters struct {

	// Okta API key.
	// +kubebuilder:validation:Optional
	APITokenSecretRef v1.SecretKeySelector `json:"apiTokenSecretRef" tf:"-"`

	// If set, will be used as the base domain for API requests.
	// +kubebuilder:validation:Optional
	BaseURL *string `json:"baseUrl,omitempty" tf:"base_url,omitempty"`

	// The mount to tie this method to for use in automatic mappings. The mapping will use the Name field of Aliases associated with this mount as the username in the mapping.
	// +kubebuilder:validation:Optional
	MountAccessor *string `json:"mountAccessor,omitempty" tf:"mount_accessor,omitempty"`

	// Name of the MFA method.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Name of the organization to be used in the Okta API.
	// +kubebuilder:validation:Optional
	OrgName *string `json:"orgName,omitempty" tf:"org_name,omitempty"`

	// If set to true, the username will only match the primary email for the account.
	// +kubebuilder:validation:Optional
	PrimaryEmail *bool `json:"primaryEmail,omitempty" tf:"primary_email,omitempty"`

	// A format string for mapping Identity names to MFA method names. Values to substitute should be placed in `{{}}`.
	// +kubebuilder:validation:Optional
	UsernameFormat *string `json:"usernameFormat,omitempty" tf:"username_format,omitempty"`
}

// OktaSpec defines the desired state of Okta
type OktaSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OktaParameters `json:"forProvider"`
}

// OktaStatus defines the observed state of Okta.
type OktaStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OktaObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Okta is the Schema for the Oktas API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type Okta struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.apiTokenSecretRef)",message="apiTokenSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.mountAccessor)",message="mountAccessor is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.orgName)",message="orgName is a required parameter"
	Spec   OktaSpec   `json:"spec"`
	Status OktaStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OktaList contains a list of Oktas
type OktaList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Okta `json:"items"`
}

// Repository type metadata.
var (
	Okta_Kind             = "Okta"
	Okta_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Okta_Kind}.String()
	Okta_KindAPIVersion   = Okta_Kind + "." + CRDGroupVersion.String()
	Okta_GroupVersionKind = CRDGroupVersion.WithKind(Okta_Kind)
)

func init() {
	SchemeBuilder.Register(&Okta{}, &OktaList{})
}
