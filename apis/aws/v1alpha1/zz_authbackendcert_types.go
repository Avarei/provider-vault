/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AuthBackendCertObservation struct {

	// Base64 encoded AWS Public key required to verify PKCS7 signature of the EC2 instance metadata.
	AwsPublicCert *string `json:"awsPublicCert,omitempty" tf:"aws_public_cert,omitempty"`

	// Unique name of the auth backend to configure.
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Name of the certificate to configure.
	CertName *string `json:"certName,omitempty" tf:"cert_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The type of document that can be verified using the certificate. Must be either "pkcs7" or "identity".
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type AuthBackendCertParameters struct {

	// Base64 encoded AWS Public key required to verify PKCS7 signature of the EC2 instance metadata.
	// +kubebuilder:validation:Optional
	AwsPublicCert *string `json:"awsPublicCert,omitempty" tf:"aws_public_cert,omitempty"`

	// Unique name of the auth backend to configure.
	// +kubebuilder:validation:Optional
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Name of the certificate to configure.
	// +kubebuilder:validation:Optional
	CertName *string `json:"certName,omitempty" tf:"cert_name,omitempty"`

	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The type of document that can be verified using the certificate. Must be either "pkcs7" or "identity".
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// AuthBackendCertSpec defines the desired state of AuthBackendCert
type AuthBackendCertSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AuthBackendCertParameters `json:"forProvider"`
}

// AuthBackendCertStatus defines the observed state of AuthBackendCert.
type AuthBackendCertStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AuthBackendCertObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AuthBackendCert is the Schema for the AuthBackendCerts API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type AuthBackendCert struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.awsPublicCert)",message="awsPublicCert is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.certName)",message="certName is a required parameter"
	Spec   AuthBackendCertSpec   `json:"spec"`
	Status AuthBackendCertStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AuthBackendCertList contains a list of AuthBackendCerts
type AuthBackendCertList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AuthBackendCert `json:"items"`
}

// Repository type metadata.
var (
	AuthBackendCert_Kind             = "AuthBackendCert"
	AuthBackendCert_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AuthBackendCert_Kind}.String()
	AuthBackendCert_KindAPIVersion   = AuthBackendCert_Kind + "." + CRDGroupVersion.String()
	AuthBackendCert_GroupVersionKind = CRDGroupVersion.WithKind(AuthBackendCert_Kind)
)

func init() {
	SchemeBuilder.Register(&AuthBackendCert{}, &AuthBackendCertList{})
}
