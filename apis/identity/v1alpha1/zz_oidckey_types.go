/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OidcKeyObservation struct {

	// Signing algorithm to use. Signing algorithm to use. Allowed values are: RS256 (default), RS384, RS512, ES256, ES384, ES512, EdDSA.
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// Array of role client ids allowed to use this key for signing. If empty, no roles are allowed. If "*", all roles are allowed.
	AllowedClientIds []*string `json:"allowedClientIds,omitempty" tf:"allowed_client_ids,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of the key.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// How often to generate a new signing key in number of seconds
	RotationPeriod *float64 `json:"rotationPeriod,omitempty" tf:"rotation_period,omitempty"`

	// Controls how long the public portion of a signing key will be available for verification after being rotated in seconds.
	VerificationTTL *float64 `json:"verificationTtl,omitempty" tf:"verification_ttl,omitempty"`
}

type OidcKeyParameters struct {

	// Signing algorithm to use. Signing algorithm to use. Allowed values are: RS256 (default), RS384, RS512, ES256, ES384, ES512, EdDSA.
	// +kubebuilder:validation:Optional
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// Array of role client ids allowed to use this key for signing. If empty, no roles are allowed. If "*", all roles are allowed.
	// +kubebuilder:validation:Optional
	AllowedClientIds []*string `json:"allowedClientIds,omitempty" tf:"allowed_client_ids,omitempty"`

	// Name of the key.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// How often to generate a new signing key in number of seconds
	// +kubebuilder:validation:Optional
	RotationPeriod *float64 `json:"rotationPeriod,omitempty" tf:"rotation_period,omitempty"`

	// Controls how long the public portion of a signing key will be available for verification after being rotated in seconds.
	// +kubebuilder:validation:Optional
	VerificationTTL *float64 `json:"verificationTtl,omitempty" tf:"verification_ttl,omitempty"`
}

// OidcKeySpec defines the desired state of OidcKey
type OidcKeySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OidcKeyParameters `json:"forProvider"`
}

// OidcKeyStatus defines the observed state of OidcKey.
type OidcKeyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OidcKeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OidcKey is the Schema for the OidcKeys API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type OidcKey struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	Spec   OidcKeySpec   `json:"spec"`
	Status OidcKeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OidcKeyList contains a list of OidcKeys
type OidcKeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OidcKey `json:"items"`
}

// Repository type metadata.
var (
	OidcKey_Kind             = "OidcKey"
	OidcKey_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OidcKey_Kind}.String()
	OidcKey_KindAPIVersion   = OidcKey_Kind + "." + CRDGroupVersion.String()
	OidcKey_GroupVersionKind = CRDGroupVersion.WithKind(OidcKey_Kind)
)

func init() {
	SchemeBuilder.Register(&OidcKey{}, &OidcKeyList{})
}
