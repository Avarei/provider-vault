/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RateLimitObservation struct {

	// If set, when a client reaches a rate limit threshold, the client will be prohibited from any further requests until after the 'block_interval' in seconds has elapsed.
	BlockInterval *float64 `json:"blockInterval,omitempty" tf:"block_interval,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The duration in seconds to enforce rate limiting for.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The name of the quota.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Path of the mount or namespace to apply the quota. A blank path configures a global rate limit quota.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The maximum number of requests at any given second to be allowed by the quota rule. The rate must be positive.
	Rate *float64 `json:"rate,omitempty" tf:"rate,omitempty"`
}

type RateLimitParameters struct {

	// If set, when a client reaches a rate limit threshold, the client will be prohibited from any further requests until after the 'block_interval' in seconds has elapsed.
	// +kubebuilder:validation:Optional
	BlockInterval *float64 `json:"blockInterval,omitempty" tf:"block_interval,omitempty"`

	// The duration in seconds to enforce rate limiting for.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// The name of the quota.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Path of the mount or namespace to apply the quota. A blank path configures a global rate limit quota.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The maximum number of requests at any given second to be allowed by the quota rule. The rate must be positive.
	// +kubebuilder:validation:Optional
	Rate *float64 `json:"rate,omitempty" tf:"rate,omitempty"`
}

// RateLimitSpec defines the desired state of RateLimit
type RateLimitSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RateLimitParameters `json:"forProvider"`
}

// RateLimitStatus defines the observed state of RateLimit.
type RateLimitStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RateLimitObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RateLimit is the Schema for the RateLimits API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type RateLimit struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.rate)",message="rate is a required parameter"
	Spec   RateLimitSpec   `json:"spec"`
	Status RateLimitStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RateLimitList contains a list of RateLimits
type RateLimitList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RateLimit `json:"items"`
}

// Repository type metadata.
var (
	RateLimit_Kind             = "RateLimit"
	RateLimit_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RateLimit_Kind}.String()
	RateLimit_KindAPIVersion   = RateLimit_Kind + "." + CRDGroupVersion.String()
	RateLimit_GroupVersionKind = CRDGroupVersion.WithKind(RateLimit_Kind)
)

func init() {
	SchemeBuilder.Register(&RateLimit{}, &RateLimitList{})
}
