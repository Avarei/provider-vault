/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EndpointObservation struct {

	// Don't attempt to delete the path from Vault if true
	DisableDelete *bool `json:"disableDelete,omitempty" tf:"disable_delete,omitempty"`

	// Don't attempt to read the path from Vault if true; drift won't be detected
	DisableRead *bool `json:"disableRead,omitempty" tf:"disable_read,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// When reading, disregard fields not present in data_json
	IgnoreAbsentFields *bool `json:"ignoreAbsentFields,omitempty" tf:"ignore_absent_fields,omitempty"`

	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Full path where to the endpoint that will be written
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Map of strings returned by write operation
	WriteData map[string]*string `json:"writeData,omitempty" tf:"write_data,omitempty"`

	// JSON data returned by write operation
	WriteDataJSON *string `json:"writeDataJson,omitempty" tf:"write_data_json,omitempty"`

	// Top-level fields returned by write to persist in state
	WriteFields []*string `json:"writeFields,omitempty" tf:"write_fields,omitempty"`
}

type EndpointParameters struct {

	// JSON-encoded data to write.
	// +kubebuilder:validation:Optional
	DataJSONSecretRef v1.SecretKeySelector `json:"dataJsonSecretRef" tf:"-"`

	// Don't attempt to delete the path from Vault if true
	// +kubebuilder:validation:Optional
	DisableDelete *bool `json:"disableDelete,omitempty" tf:"disable_delete,omitempty"`

	// Don't attempt to read the path from Vault if true; drift won't be detected
	// +kubebuilder:validation:Optional
	DisableRead *bool `json:"disableRead,omitempty" tf:"disable_read,omitempty"`

	// When reading, disregard fields not present in data_json
	// +kubebuilder:validation:Optional
	IgnoreAbsentFields *bool `json:"ignoreAbsentFields,omitempty" tf:"ignore_absent_fields,omitempty"`

	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Full path where to the endpoint that will be written
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Top-level fields returned by write to persist in state
	// +kubebuilder:validation:Optional
	WriteFields []*string `json:"writeFields,omitempty" tf:"write_fields,omitempty"`
}

// EndpointSpec defines the desired state of Endpoint
type EndpointSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EndpointParameters `json:"forProvider"`
}

// EndpointStatus defines the observed state of Endpoint.
type EndpointStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EndpointObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Endpoint is the Schema for the Endpoints API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type Endpoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.dataJsonSecretRef)",message="dataJsonSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.path)",message="path is a required parameter"
	Spec   EndpointSpec   `json:"spec"`
	Status EndpointStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EndpointList contains a list of Endpoints
type EndpointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Endpoint `json:"items"`
}

// Repository type metadata.
var (
	Endpoint_Kind             = "Endpoint"
	Endpoint_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Endpoint_Kind}.String()
	Endpoint_KindAPIVersion   = Endpoint_Kind + "." + CRDGroupVersion.String()
	Endpoint_GroupVersionKind = CRDGroupVersion.WithKind(Endpoint_Kind)
)

func init() {
	SchemeBuilder.Register(&Endpoint{}, &EndpointList{})
}
