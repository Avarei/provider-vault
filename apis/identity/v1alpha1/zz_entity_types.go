/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EntityObservation struct {

	// Whether the entity is disabled. Disabled entities' associated tokens cannot be used, but are not revoked.
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// Manage policies externally through `vault_identity_entity_policies`.
	ExternalPolicies *bool `json:"externalPolicies,omitempty" tf:"external_policies,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Metadata to be associated with the entity.
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Name of the entity.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Policies to be tied to the entity.
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`
}

type EntityParameters struct {

	// Whether the entity is disabled. Disabled entities' associated tokens cannot be used, but are not revoked.
	// +kubebuilder:validation:Optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// Manage policies externally through `vault_identity_entity_policies`.
	// +kubebuilder:validation:Optional
	ExternalPolicies *bool `json:"externalPolicies,omitempty" tf:"external_policies,omitempty"`

	// Metadata to be associated with the entity.
	// +kubebuilder:validation:Optional
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Name of the entity.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Policies to be tied to the entity.
	// +kubebuilder:validation:Optional
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`
}

// EntitySpec defines the desired state of Entity
type EntitySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EntityParameters `json:"forProvider"`
}

// EntityStatus defines the observed state of Entity.
type EntityStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EntityObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Entity is the Schema for the Entitys API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type Entity struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EntitySpec   `json:"spec"`
	Status            EntityStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EntityList contains a list of Entitys
type EntityList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Entity `json:"items"`
}

// Repository type metadata.
var (
	Entity_Kind             = "Entity"
	Entity_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Entity_Kind}.String()
	Entity_KindAPIVersion   = Entity_Kind + "." + CRDGroupVersion.String()
	Entity_GroupVersionKind = CRDGroupVersion.WithKind(Entity_Kind)
)

func init() {
	SchemeBuilder.Register(&Entity{}, &EntityList{})
}
