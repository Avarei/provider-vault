/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RequestHeaderObservation struct {

	// Whether this header's value should be HMAC'd in the audit logs.
	HMAC *bool `json:"hmac,omitempty" tf:"hmac,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the request header to audit.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type RequestHeaderParameters struct {

	// Whether this header's value should be HMAC'd in the audit logs.
	// +kubebuilder:validation:Optional
	HMAC *bool `json:"hmac,omitempty" tf:"hmac,omitempty"`

	// The name of the request header to audit.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

// RequestHeaderSpec defines the desired state of RequestHeader
type RequestHeaderSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RequestHeaderParameters `json:"forProvider"`
}

// RequestHeaderStatus defines the observed state of RequestHeader.
type RequestHeaderStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RequestHeaderObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RequestHeader is the Schema for the RequestHeaders API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type RequestHeader struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	Spec   RequestHeaderSpec   `json:"spec"`
	Status RequestHeaderStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RequestHeaderList contains a list of RequestHeaders
type RequestHeaderList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RequestHeader `json:"items"`
}

// Repository type metadata.
var (
	RequestHeader_Kind             = "RequestHeader"
	RequestHeader_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RequestHeader_Kind}.String()
	RequestHeader_KindAPIVersion   = RequestHeader_Kind + "." + CRDGroupVersion.String()
	RequestHeader_GroupVersionKind = CRDGroupVersion.WithKind(RequestHeader_Kind)
)

func init() {
	SchemeBuilder.Register(&RequestHeader{}, &RequestHeaderList{})
}
