/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecretBackendKeyObservation struct {

	// If set, enables taking backup of named key in the plaintext format. Once set, this cannot be disabled.
	AllowPlaintextBackup *bool `json:"allowPlaintextBackup,omitempty" tf:"allow_plaintext_backup,omitempty"`

	// Amount of time the key should live before being automatically rotated. A value of 0 disables automatic rotation for the key.
	AutoRotateInterval *float64 `json:"autoRotateInterval,omitempty" tf:"auto_rotate_interval,omitempty"`

	// Amount of time the key should live before being automatically rotated. A value of 0 disables automatic rotation for the key.
	AutoRotatePeriod *float64 `json:"autoRotatePeriod,omitempty" tf:"auto_rotate_period,omitempty"`

	// The Transit secret backend the resource belongs to.
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Whether or not to support convergent encryption, where the same plaintext creates the same ciphertext. This requires derived to be set to true.
	ConvergentEncryption *bool `json:"convergentEncryption,omitempty" tf:"convergent_encryption,omitempty"`

	// Specifies if the key is allowed to be deleted.
	DeletionAllowed *bool `json:"deletionAllowed,omitempty" tf:"deletion_allowed,omitempty"`

	// Specifies if key derivation is to be used. If enabled, all encrypt/decrypt requests to this key must provide a context which is used for key derivation.
	Derived *bool `json:"derived,omitempty" tf:"derived,omitempty"`

	// Enables keys to be exportable. This allows for all the valid keys in the key ring to be exported. Once set, this cannot be disabled.
	Exportable *bool `json:"exportable,omitempty" tf:"exportable,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// List of key versions in the keyring.
	Keys []map[string]*string `json:"keys,omitempty" tf:"keys,omitempty"`

	// Latest key version in use in the keyring
	LatestVersion *float64 `json:"latestVersion,omitempty" tf:"latest_version,omitempty"`

	// Minimum key version available for use.
	MinAvailableVersion *float64 `json:"minAvailableVersion,omitempty" tf:"min_available_version,omitempty"`

	// Minimum key version to use for decryption.
	MinDecryptionVersion *float64 `json:"minDecryptionVersion,omitempty" tf:"min_decryption_version,omitempty"`

	// Minimum key version to use for encryption
	MinEncryptionVersion *float64 `json:"minEncryptionVersion,omitempty" tf:"min_encryption_version,omitempty"`

	// Name of the encryption key to create.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Whether or not the key supports decryption, based on key type.
	SupportsDecryption *bool `json:"supportsDecryption,omitempty" tf:"supports_decryption,omitempty"`

	// Whether or not the key supports derivation, based on key type.
	SupportsDerivation *bool `json:"supportsDerivation,omitempty" tf:"supports_derivation,omitempty"`

	// Whether or not the key supports encryption, based on key type.
	SupportsEncryption *bool `json:"supportsEncryption,omitempty" tf:"supports_encryption,omitempty"`

	// Whether or not the key supports signing, based on key type.
	SupportsSigning *bool `json:"supportsSigning,omitempty" tf:"supports_signing,omitempty"`

	// Specifies the type of key to create. The currently-supported types are: aes128-gcm96, aes256-gcm96, chacha20-poly1305, ed25519, ecdsa-p256, ecdsa-p384, ecdsa-p521, rsa-2048, rsa-3072, rsa-4096
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SecretBackendKeyParameters struct {

	// If set, enables taking backup of named key in the plaintext format. Once set, this cannot be disabled.
	// +kubebuilder:validation:Optional
	AllowPlaintextBackup *bool `json:"allowPlaintextBackup,omitempty" tf:"allow_plaintext_backup,omitempty"`

	// Amount of time the key should live before being automatically rotated. A value of 0 disables automatic rotation for the key.
	// +kubebuilder:validation:Optional
	AutoRotateInterval *float64 `json:"autoRotateInterval,omitempty" tf:"auto_rotate_interval,omitempty"`

	// Amount of time the key should live before being automatically rotated. A value of 0 disables automatic rotation for the key.
	// +kubebuilder:validation:Optional
	AutoRotatePeriod *float64 `json:"autoRotatePeriod,omitempty" tf:"auto_rotate_period,omitempty"`

	// The Transit secret backend the resource belongs to.
	// +kubebuilder:validation:Optional
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Whether or not to support convergent encryption, where the same plaintext creates the same ciphertext. This requires derived to be set to true.
	// +kubebuilder:validation:Optional
	ConvergentEncryption *bool `json:"convergentEncryption,omitempty" tf:"convergent_encryption,omitempty"`

	// Specifies if the key is allowed to be deleted.
	// +kubebuilder:validation:Optional
	DeletionAllowed *bool `json:"deletionAllowed,omitempty" tf:"deletion_allowed,omitempty"`

	// Specifies if key derivation is to be used. If enabled, all encrypt/decrypt requests to this key must provide a context which is used for key derivation.
	// +kubebuilder:validation:Optional
	Derived *bool `json:"derived,omitempty" tf:"derived,omitempty"`

	// Enables keys to be exportable. This allows for all the valid keys in the key ring to be exported. Once set, this cannot be disabled.
	// +kubebuilder:validation:Optional
	Exportable *bool `json:"exportable,omitempty" tf:"exportable,omitempty"`

	// Minimum key version to use for decryption.
	// +kubebuilder:validation:Optional
	MinDecryptionVersion *float64 `json:"minDecryptionVersion,omitempty" tf:"min_decryption_version,omitempty"`

	// Minimum key version to use for encryption
	// +kubebuilder:validation:Optional
	MinEncryptionVersion *float64 `json:"minEncryptionVersion,omitempty" tf:"min_encryption_version,omitempty"`

	// Name of the encryption key to create.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Specifies the type of key to create. The currently-supported types are: aes128-gcm96, aes256-gcm96, chacha20-poly1305, ed25519, ecdsa-p256, ecdsa-p384, ecdsa-p521, rsa-2048, rsa-3072, rsa-4096
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// SecretBackendKeySpec defines the desired state of SecretBackendKey
type SecretBackendKeySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecretBackendKeyParameters `json:"forProvider"`
}

// SecretBackendKeyStatus defines the observed state of SecretBackendKey.
type SecretBackendKeyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecretBackendKeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SecretBackendKey is the Schema for the SecretBackendKeys API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type SecretBackendKey struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.backend)",message="backend is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	Spec   SecretBackendKeySpec   `json:"spec"`
	Status SecretBackendKeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecretBackendKeyList contains a list of SecretBackendKeys
type SecretBackendKeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecretBackendKey `json:"items"`
}

// Repository type metadata.
var (
	SecretBackendKey_Kind             = "SecretBackendKey"
	SecretBackendKey_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecretBackendKey_Kind}.String()
	SecretBackendKey_KindAPIVersion   = SecretBackendKey_Kind + "." + CRDGroupVersion.String()
	SecretBackendKey_GroupVersionKind = CRDGroupVersion.WithKind(SecretBackendKey_Kind)
)

func init() {
	SchemeBuilder.Register(&SecretBackendKey{}, &SecretBackendKeyList{})
}
