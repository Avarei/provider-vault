/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AuthBackendRoleTagObservation struct {

	// Allows migration of the underlying instance where the client resides.
	AllowInstanceMigration *bool `json:"allowInstanceMigration,omitempty" tf:"allow_instance_migration,omitempty"`

	// AWS auth backend to read tags from.
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Only allow a single token to be granted per instance ID.
	DisallowReauthentication *bool `json:"disallowReauthentication,omitempty" tf:"disallow_reauthentication,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Instance ID for which this tag is intended. The created tag can only be used by the instance with the given ID.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// The maximum allowed lifetime of tokens issued using this role.
	MaxTTL *string `json:"maxTtl,omitempty" tf:"max_ttl,omitempty"`

	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Policies to be associated with the tag.
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`

	// Name of the role.
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	TagKey *string `json:"tagKey,omitempty" tf:"tag_key,omitempty"`

	TagValue *string `json:"tagValue,omitempty" tf:"tag_value,omitempty"`
}

type AuthBackendRoleTagParameters struct {

	// Allows migration of the underlying instance where the client resides.
	// +kubebuilder:validation:Optional
	AllowInstanceMigration *bool `json:"allowInstanceMigration,omitempty" tf:"allow_instance_migration,omitempty"`

	// AWS auth backend to read tags from.
	// +kubebuilder:validation:Optional
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Only allow a single token to be granted per instance ID.
	// +kubebuilder:validation:Optional
	DisallowReauthentication *bool `json:"disallowReauthentication,omitempty" tf:"disallow_reauthentication,omitempty"`

	// Instance ID for which this tag is intended. The created tag can only be used by the instance with the given ID.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// The maximum allowed lifetime of tokens issued using this role.
	// +kubebuilder:validation:Optional
	MaxTTL *string `json:"maxTtl,omitempty" tf:"max_ttl,omitempty"`

	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Policies to be associated with the tag.
	// +kubebuilder:validation:Optional
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`

	// Name of the role.
	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`
}

// AuthBackendRoleTagSpec defines the desired state of AuthBackendRoleTag
type AuthBackendRoleTagSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AuthBackendRoleTagParameters `json:"forProvider"`
}

// AuthBackendRoleTagStatus defines the observed state of AuthBackendRoleTag.
type AuthBackendRoleTagStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AuthBackendRoleTagObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AuthBackendRoleTag is the Schema for the AuthBackendRoleTags API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type AuthBackendRoleTag struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.role)",message="role is a required parameter"
	Spec   AuthBackendRoleTagSpec   `json:"spec"`
	Status AuthBackendRoleTagStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AuthBackendRoleTagList contains a list of AuthBackendRoleTags
type AuthBackendRoleTagList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AuthBackendRoleTag `json:"items"`
}

// Repository type metadata.
var (
	AuthBackendRoleTag_Kind             = "AuthBackendRoleTag"
	AuthBackendRoleTag_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AuthBackendRoleTag_Kind}.String()
	AuthBackendRoleTag_KindAPIVersion   = AuthBackendRoleTag_Kind + "." + CRDGroupVersion.String()
	AuthBackendRoleTag_GroupVersionKind = CRDGroupVersion.WithKind(AuthBackendRoleTag_Kind)
)

func init() {
	SchemeBuilder.Register(&AuthBackendRoleTag{}, &AuthBackendRoleTagList{})
}
