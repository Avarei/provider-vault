/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AuthBackendLoginObservation struct {

	// The accessor for the token.
	Accessor *string `json:"accessor,omitempty" tf:"accessor,omitempty"`

	// Unique name of the auth backend to configure.
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// The token.
	ClientToken *string `json:"clientToken,omitempty" tf:"client_token,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// How long the token is valid for.
	LeaseDuration *float64 `json:"leaseDuration,omitempty" tf:"lease_duration,omitempty"`

	LeaseStarted *string `json:"leaseStarted,omitempty" tf:"lease_started,omitempty"`

	// Metadata associated with the token.
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Policies set on the token.
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`

	// Whether the token is renewable or not.
	Renewable *bool `json:"renewable,omitempty" tf:"renewable,omitempty"`

	// The RoleID to log in with.
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`

	// The SecretID to log in with.
	SecretID *string `json:"secretId,omitempty" tf:"secret_id,omitempty"`
}

type AuthBackendLoginParameters struct {

	// Unique name of the auth backend to configure.
	// +kubebuilder:validation:Optional
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The RoleID to log in with.
	// +kubebuilder:validation:Optional
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`

	// The SecretID to log in with.
	// +kubebuilder:validation:Optional
	SecretID *string `json:"secretId,omitempty" tf:"secret_id,omitempty"`
}

// AuthBackendLoginSpec defines the desired state of AuthBackendLogin
type AuthBackendLoginSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AuthBackendLoginParameters `json:"forProvider"`
}

// AuthBackendLoginStatus defines the observed state of AuthBackendLogin.
type AuthBackendLoginStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AuthBackendLoginObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AuthBackendLogin is the Schema for the AuthBackendLogins API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type AuthBackendLogin struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.roleId)",message="roleId is a required parameter"
	Spec   AuthBackendLoginSpec   `json:"spec"`
	Status AuthBackendLoginStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AuthBackendLoginList contains a list of AuthBackendLogins
type AuthBackendLoginList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AuthBackendLogin `json:"items"`
}

// Repository type metadata.
var (
	AuthBackendLogin_Kind             = "AuthBackendLogin"
	AuthBackendLogin_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AuthBackendLogin_Kind}.String()
	AuthBackendLogin_KindAPIVersion   = AuthBackendLogin_Kind + "." + CRDGroupVersion.String()
	AuthBackendLogin_GroupVersionKind = CRDGroupVersion.WithKind(AuthBackendLogin_Kind)
)

func init() {
	SchemeBuilder.Register(&AuthBackendLogin{}, &AuthBackendLoginList{})
}
