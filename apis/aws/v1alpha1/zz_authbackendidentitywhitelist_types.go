/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AuthBackendIdentityWhitelistObservation struct {

	// Unique name of the auth backend to configure.
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// If true, disables the periodic tidying of the identiy whitelist entries.
	DisablePeriodicTidy *bool `json:"disablePeriodicTidy,omitempty" tf:"disable_periodic_tidy,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The amount of extra time that must have passed beyond the roletag expiration, before it's removed from backend storage.
	SafetyBuffer *float64 `json:"safetyBuffer,omitempty" tf:"safety_buffer,omitempty"`
}

type AuthBackendIdentityWhitelistParameters struct {

	// Unique name of the auth backend to configure.
	// +kubebuilder:validation:Optional
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// If true, disables the periodic tidying of the identiy whitelist entries.
	// +kubebuilder:validation:Optional
	DisablePeriodicTidy *bool `json:"disablePeriodicTidy,omitempty" tf:"disable_periodic_tidy,omitempty"`

	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The amount of extra time that must have passed beyond the roletag expiration, before it's removed from backend storage.
	// +kubebuilder:validation:Optional
	SafetyBuffer *float64 `json:"safetyBuffer,omitempty" tf:"safety_buffer,omitempty"`
}

// AuthBackendIdentityWhitelistSpec defines the desired state of AuthBackendIdentityWhitelist
type AuthBackendIdentityWhitelistSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AuthBackendIdentityWhitelistParameters `json:"forProvider"`
}

// AuthBackendIdentityWhitelistStatus defines the observed state of AuthBackendIdentityWhitelist.
type AuthBackendIdentityWhitelistStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AuthBackendIdentityWhitelistObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AuthBackendIdentityWhitelist is the Schema for the AuthBackendIdentityWhitelists API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type AuthBackendIdentityWhitelist struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AuthBackendIdentityWhitelistSpec   `json:"spec"`
	Status            AuthBackendIdentityWhitelistStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AuthBackendIdentityWhitelistList contains a list of AuthBackendIdentityWhitelists
type AuthBackendIdentityWhitelistList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AuthBackendIdentityWhitelist `json:"items"`
}

// Repository type metadata.
var (
	AuthBackendIdentityWhitelist_Kind             = "AuthBackendIdentityWhitelist"
	AuthBackendIdentityWhitelist_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AuthBackendIdentityWhitelist_Kind}.String()
	AuthBackendIdentityWhitelist_KindAPIVersion   = AuthBackendIdentityWhitelist_Kind + "." + CRDGroupVersion.String()
	AuthBackendIdentityWhitelist_GroupVersionKind = CRDGroupVersion.WithKind(AuthBackendIdentityWhitelist_Kind)
)

func init() {
	SchemeBuilder.Register(&AuthBackendIdentityWhitelist{}, &AuthBackendIdentityWhitelistList{})
}
