/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecretBackendCrlConfigObservation struct {

	// Enables or disables periodic rebuilding of the CRL upon expiry.
	AutoRebuild *bool `json:"autoRebuild,omitempty" tf:"auto_rebuild,omitempty"`

	// Grace period before CRL expiry to attempt rebuild of CRL.
	AutoRebuildGracePeriod *string `json:"autoRebuildGracePeriod,omitempty" tf:"auto_rebuild_grace_period,omitempty"`

	// The path of the PKI secret backend the resource belongs to.
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Enable cross-cluster revocation request queues.
	CrossClusterRevocation *bool `json:"crossClusterRevocation,omitempty" tf:"cross_cluster_revocation,omitempty"`

	// Interval to check for new revocations on, to regenerate the delta CRL.
	DeltaRebuildInterval *string `json:"deltaRebuildInterval,omitempty" tf:"delta_rebuild_interval,omitempty"`

	// Disables or enables CRL building
	Disable *bool `json:"disable,omitempty" tf:"disable,omitempty"`

	// Enables or disables building of delta CRLs with up-to-date revocation information, augmenting the last complete CRL.
	EnableDelta *bool `json:"enableDelta,omitempty" tf:"enable_delta,omitempty"`

	// Specifies the time until expiration.
	Expiry *string `json:"expiry,omitempty" tf:"expiry,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Disables or enables the OCSP responder in Vault.
	OcspDisable *bool `json:"ocspDisable,omitempty" tf:"ocsp_disable,omitempty"`

	// The amount of time an OCSP response can be cached for, useful for OCSP stapling refresh durations.
	OcspExpiry *string `json:"ocspExpiry,omitempty" tf:"ocsp_expiry,omitempty"`

	// Enables unified CRL and OCSP building.
	UnifiedCrl *bool `json:"unifiedCrl,omitempty" tf:"unified_crl,omitempty"`

	// Enables serving the unified CRL and OCSP on the existing, previously cluster-local paths.
	UnifiedCrlOnExistingPaths *bool `json:"unifiedCrlOnExistingPaths,omitempty" tf:"unified_crl_on_existing_paths,omitempty"`
}

type SecretBackendCrlConfigParameters struct {

	// Enables or disables periodic rebuilding of the CRL upon expiry.
	// +kubebuilder:validation:Optional
	AutoRebuild *bool `json:"autoRebuild,omitempty" tf:"auto_rebuild,omitempty"`

	// Grace period before CRL expiry to attempt rebuild of CRL.
	// +kubebuilder:validation:Optional
	AutoRebuildGracePeriod *string `json:"autoRebuildGracePeriod,omitempty" tf:"auto_rebuild_grace_period,omitempty"`

	// The path of the PKI secret backend the resource belongs to.
	// +kubebuilder:validation:Optional
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Enable cross-cluster revocation request queues.
	// +kubebuilder:validation:Optional
	CrossClusterRevocation *bool `json:"crossClusterRevocation,omitempty" tf:"cross_cluster_revocation,omitempty"`

	// Interval to check for new revocations on, to regenerate the delta CRL.
	// +kubebuilder:validation:Optional
	DeltaRebuildInterval *string `json:"deltaRebuildInterval,omitempty" tf:"delta_rebuild_interval,omitempty"`

	// Disables or enables CRL building
	// +kubebuilder:validation:Optional
	Disable *bool `json:"disable,omitempty" tf:"disable,omitempty"`

	// Enables or disables building of delta CRLs with up-to-date revocation information, augmenting the last complete CRL.
	// +kubebuilder:validation:Optional
	EnableDelta *bool `json:"enableDelta,omitempty" tf:"enable_delta,omitempty"`

	// Specifies the time until expiration.
	// +kubebuilder:validation:Optional
	Expiry *string `json:"expiry,omitempty" tf:"expiry,omitempty"`

	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Disables or enables the OCSP responder in Vault.
	// +kubebuilder:validation:Optional
	OcspDisable *bool `json:"ocspDisable,omitempty" tf:"ocsp_disable,omitempty"`

	// The amount of time an OCSP response can be cached for, useful for OCSP stapling refresh durations.
	// +kubebuilder:validation:Optional
	OcspExpiry *string `json:"ocspExpiry,omitempty" tf:"ocsp_expiry,omitempty"`

	// Enables unified CRL and OCSP building.
	// +kubebuilder:validation:Optional
	UnifiedCrl *bool `json:"unifiedCrl,omitempty" tf:"unified_crl,omitempty"`

	// Enables serving the unified CRL and OCSP on the existing, previously cluster-local paths.
	// +kubebuilder:validation:Optional
	UnifiedCrlOnExistingPaths *bool `json:"unifiedCrlOnExistingPaths,omitempty" tf:"unified_crl_on_existing_paths,omitempty"`
}

// SecretBackendCrlConfigSpec defines the desired state of SecretBackendCrlConfig
type SecretBackendCrlConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecretBackendCrlConfigParameters `json:"forProvider"`
}

// SecretBackendCrlConfigStatus defines the observed state of SecretBackendCrlConfig.
type SecretBackendCrlConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecretBackendCrlConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SecretBackendCrlConfig is the Schema for the SecretBackendCrlConfigs API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type SecretBackendCrlConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.backend)",message="backend is a required parameter"
	Spec   SecretBackendCrlConfigSpec   `json:"spec"`
	Status SecretBackendCrlConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecretBackendCrlConfigList contains a list of SecretBackendCrlConfigs
type SecretBackendCrlConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecretBackendCrlConfig `json:"items"`
}

// Repository type metadata.
var (
	SecretBackendCrlConfig_Kind             = "SecretBackendCrlConfig"
	SecretBackendCrlConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecretBackendCrlConfig_Kind}.String()
	SecretBackendCrlConfig_KindAPIVersion   = SecretBackendCrlConfig_Kind + "." + CRDGroupVersion.String()
	SecretBackendCrlConfig_GroupVersionKind = CRDGroupVersion.WithKind(SecretBackendCrlConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&SecretBackendCrlConfig{}, &SecretBackendCrlConfigList{})
}
