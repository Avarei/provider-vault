/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OidcProviderObservation struct {

	// The client IDs that are permitted to use the provider. If empty, no clients are allowed. If "*", all clients are allowed.
	AllowedClientIds []*string `json:"allowedClientIds,omitempty" tf:"allowed_client_ids,omitempty"`

	// Set to true if the issuer endpoint uses HTTPS.
	HTTPSEnabled *bool `json:"httpsEnabled,omitempty" tf:"https_enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies what will be used as the 'scheme://host:port' component for the 'iss' claim of ID tokens.This value is computed using the issuer_host and https_enabled fields.
	Issuer *string `json:"issuer,omitempty" tf:"issuer,omitempty"`

	// The host for the issuer. Can be either host or host:port.
	IssuerHost *string `json:"issuerHost,omitempty" tf:"issuer_host,omitempty"`

	// The name of the provider.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The scopes available for requesting on the provider.
	ScopesSupported []*string `json:"scopesSupported,omitempty" tf:"scopes_supported,omitempty"`
}

type OidcProviderParameters struct {

	// The client IDs that are permitted to use the provider. If empty, no clients are allowed. If "*", all clients are allowed.
	// +kubebuilder:validation:Optional
	AllowedClientIds []*string `json:"allowedClientIds,omitempty" tf:"allowed_client_ids,omitempty"`

	// Set to true if the issuer endpoint uses HTTPS.
	// +kubebuilder:validation:Optional
	HTTPSEnabled *bool `json:"httpsEnabled,omitempty" tf:"https_enabled,omitempty"`

	// The host for the issuer. Can be either host or host:port.
	// +kubebuilder:validation:Optional
	IssuerHost *string `json:"issuerHost,omitempty" tf:"issuer_host,omitempty"`

	// The name of the provider.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The scopes available for requesting on the provider.
	// +kubebuilder:validation:Optional
	ScopesSupported []*string `json:"scopesSupported,omitempty" tf:"scopes_supported,omitempty"`
}

// OidcProviderSpec defines the desired state of OidcProvider
type OidcProviderSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OidcProviderParameters `json:"forProvider"`
}

// OidcProviderStatus defines the observed state of OidcProvider.
type OidcProviderStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OidcProviderObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OidcProvider is the Schema for the OidcProviders API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type OidcProvider struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	Spec   OidcProviderSpec   `json:"spec"`
	Status OidcProviderStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OidcProviderList contains a list of OidcProviders
type OidcProviderList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OidcProvider `json:"items"`
}

// Repository type metadata.
var (
	OidcProvider_Kind             = "OidcProvider"
	OidcProvider_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OidcProvider_Kind}.String()
	OidcProvider_KindAPIVersion   = OidcProvider_Kind + "." + CRDGroupVersion.String()
	OidcProvider_GroupVersionKind = CRDGroupVersion.WithKind(OidcProvider_Kind)
)

func init() {
	SchemeBuilder.Register(&OidcProvider{}, &OidcProviderList{})
}
