/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DuoObservation struct {

	// API hostname for Duo.
	APIHostname *string `json:"apiHostname,omitempty" tf:"api_hostname,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The mount to tie this method to for use in automatic mappings. The mapping will use the Name field of Aliases associated with this mount as the username in the mapping.
	MountAccessor *string `json:"mountAccessor,omitempty" tf:"mount_accessor,omitempty"`

	// Name of the MFA method.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Push information for Duo.
	PushInfo *string `json:"pushInfo,omitempty" tf:"push_info,omitempty"`

	// A format string for mapping Identity names to MFA method names. Values to substitute should be placed in `{{}}`.
	UsernameFormat *string `json:"usernameFormat,omitempty" tf:"username_format,omitempty"`
}

type DuoParameters struct {

	// API hostname for Duo.
	// +kubebuilder:validation:Optional
	APIHostname *string `json:"apiHostname,omitempty" tf:"api_hostname,omitempty"`

	// Integration key for Duo.
	// +kubebuilder:validation:Optional
	IntegrationKeySecretRef v1.SecretKeySelector `json:"integrationKeySecretRef" tf:"-"`

	// The mount to tie this method to for use in automatic mappings. The mapping will use the Name field of Aliases associated with this mount as the username in the mapping.
	// +kubebuilder:validation:Optional
	MountAccessor *string `json:"mountAccessor,omitempty" tf:"mount_accessor,omitempty"`

	// Name of the MFA method.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Push information for Duo.
	// +kubebuilder:validation:Optional
	PushInfo *string `json:"pushInfo,omitempty" tf:"push_info,omitempty"`

	// Secret key for Duo.
	// +kubebuilder:validation:Optional
	SecretKeySecretRef v1.SecretKeySelector `json:"secretKeySecretRef" tf:"-"`

	// A format string for mapping Identity names to MFA method names. Values to substitute should be placed in `{{}}`.
	// +kubebuilder:validation:Optional
	UsernameFormat *string `json:"usernameFormat,omitempty" tf:"username_format,omitempty"`
}

// DuoSpec defines the desired state of Duo
type DuoSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DuoParameters `json:"forProvider"`
}

// DuoStatus defines the observed state of Duo.
type DuoStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DuoObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Duo is the Schema for the Duos API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type Duo struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.apiHostname)",message="apiHostname is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.integrationKeySecretRef)",message="integrationKeySecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.mountAccessor)",message="mountAccessor is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.secretKeySecretRef)",message="secretKeySecretRef is a required parameter"
	Spec   DuoSpec   `json:"spec"`
	Status DuoStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DuoList contains a list of Duos
type DuoList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Duo `json:"items"`
}

// Repository type metadata.
var (
	Duo_Kind             = "Duo"
	Duo_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Duo_Kind}.String()
	Duo_KindAPIVersion   = Duo_Kind + "." + CRDGroupVersion.String()
	Duo_GroupVersionKind = CRDGroupVersion.WithKind(Duo_Kind)
)

func init() {
	SchemeBuilder.Register(&Duo{}, &DuoList{})
}
