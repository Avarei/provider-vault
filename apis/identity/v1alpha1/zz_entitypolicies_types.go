/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EntityPoliciesObservation struct {

	// ID of the entity.
	EntityID *string `json:"entityId,omitempty" tf:"entity_id,omitempty"`

	// Name of the entity.
	EntityName *string `json:"entityName,omitempty" tf:"entity_name,omitempty"`

	// Should the resource manage policies exclusively
	Exclusive *bool `json:"exclusive,omitempty" tf:"exclusive,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Policies to be tied to the entity.
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`
}

type EntityPoliciesParameters struct {

	// ID of the entity.
	// +kubebuilder:validation:Optional
	EntityID *string `json:"entityId,omitempty" tf:"entity_id,omitempty"`

	// Should the resource manage policies exclusively
	// +kubebuilder:validation:Optional
	Exclusive *bool `json:"exclusive,omitempty" tf:"exclusive,omitempty"`

	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Policies to be tied to the entity.
	// +kubebuilder:validation:Optional
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`
}

// EntityPoliciesSpec defines the desired state of EntityPolicies
type EntityPoliciesSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EntityPoliciesParameters `json:"forProvider"`
}

// EntityPoliciesStatus defines the observed state of EntityPolicies.
type EntityPoliciesStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EntityPoliciesObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EntityPolicies is the Schema for the EntityPoliciess API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type EntityPolicies struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.entityId)",message="entityId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.policies)",message="policies is a required parameter"
	Spec   EntityPoliciesSpec   `json:"spec"`
	Status EntityPoliciesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EntityPoliciesList contains a list of EntityPoliciess
type EntityPoliciesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EntityPolicies `json:"items"`
}

// Repository type metadata.
var (
	EntityPolicies_Kind             = "EntityPolicies"
	EntityPolicies_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EntityPolicies_Kind}.String()
	EntityPolicies_KindAPIVersion   = EntityPolicies_Kind + "." + CRDGroupVersion.String()
	EntityPolicies_GroupVersionKind = CRDGroupVersion.WithKind(EntityPolicies_Kind)
)

func init() {
	SchemeBuilder.Register(&EntityPolicies{}, &EntityPoliciesList{})
}
