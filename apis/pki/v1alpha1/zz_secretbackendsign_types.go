/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecretBackendSignObservation struct {

	// List of alternative names.
	AltNames []*string `json:"altNames,omitempty" tf:"alt_names,omitempty"`

	// If enabled, a new certificate will be generated if the expiration is within min_seconds_remaining
	AutoRenew *bool `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	// The PKI secret backend the resource belongs to.
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// The CA chain.
	CAChain []*string `json:"caChain,omitempty" tf:"ca_chain,omitempty"`

	// The certicate.
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// CN of intermediate to create.
	CommonName *string `json:"commonName,omitempty" tf:"common_name,omitempty"`

	// The CSR.
	Csr *string `json:"csr,omitempty" tf:"csr,omitempty"`

	// Flag to exclude CN from SANs.
	ExcludeCnFromSans *bool `json:"excludeCnFromSans,omitempty" tf:"exclude_cn_from_sans,omitempty"`

	// The certificate expiration as a Unix-style timestamp.
	Expiration *float64 `json:"expiration,omitempty" tf:"expiration,omitempty"`

	// The format of data.
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// List of alternative IPs.
	IPSans []*string `json:"ipSans,omitempty" tf:"ip_sans,omitempty"`

	// The issuing CA.
	IssuingCA *string `json:"issuingCa,omitempty" tf:"issuing_ca,omitempty"`

	// Generate a new certificate when the expiration is within this number of seconds
	MinSecondsRemaining *float64 `json:"minSecondsRemaining,omitempty" tf:"min_seconds_remaining,omitempty"`

	// Name of the role to create the certificate against.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// List of other SANs.
	OtherSans []*string `json:"otherSans,omitempty" tf:"other_sans,omitempty"`

	// Initially false, and then set to true during refresh once the expiration is less than min_seconds_remaining in the future.
	RenewPending *bool `json:"renewPending,omitempty" tf:"renew_pending,omitempty"`

	// The serial number.
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// The certificate's serial number, hex formatted.
	SerialNumber *string `json:"serialNumber,omitempty" tf:"serial_number,omitempty"`

	// Time to live.
	TTL *string `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// List of alternative URIs.
	URISans []*string `json:"uriSans,omitempty" tf:"uri_sans,omitempty"`
}

type SecretBackendSignParameters struct {

	// List of alternative names.
	// +kubebuilder:validation:Optional
	AltNames []*string `json:"altNames,omitempty" tf:"alt_names,omitempty"`

	// If enabled, a new certificate will be generated if the expiration is within min_seconds_remaining
	// +kubebuilder:validation:Optional
	AutoRenew *bool `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	// The PKI secret backend the resource belongs to.
	// +kubebuilder:validation:Optional
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// CN of intermediate to create.
	// +kubebuilder:validation:Optional
	CommonName *string `json:"commonName,omitempty" tf:"common_name,omitempty"`

	// The CSR.
	// +kubebuilder:validation:Optional
	Csr *string `json:"csr,omitempty" tf:"csr,omitempty"`

	// Flag to exclude CN from SANs.
	// +kubebuilder:validation:Optional
	ExcludeCnFromSans *bool `json:"excludeCnFromSans,omitempty" tf:"exclude_cn_from_sans,omitempty"`

	// The format of data.
	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// List of alternative IPs.
	// +kubebuilder:validation:Optional
	IPSans []*string `json:"ipSans,omitempty" tf:"ip_sans,omitempty"`

	// Generate a new certificate when the expiration is within this number of seconds
	// +kubebuilder:validation:Optional
	MinSecondsRemaining *float64 `json:"minSecondsRemaining,omitempty" tf:"min_seconds_remaining,omitempty"`

	// Name of the role to create the certificate against.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// List of other SANs.
	// +kubebuilder:validation:Optional
	OtherSans []*string `json:"otherSans,omitempty" tf:"other_sans,omitempty"`

	// Time to live.
	// +kubebuilder:validation:Optional
	TTL *string `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// List of alternative URIs.
	// +kubebuilder:validation:Optional
	URISans []*string `json:"uriSans,omitempty" tf:"uri_sans,omitempty"`
}

// SecretBackendSignSpec defines the desired state of SecretBackendSign
type SecretBackendSignSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecretBackendSignParameters `json:"forProvider"`
}

// SecretBackendSignStatus defines the observed state of SecretBackendSign.
type SecretBackendSignStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecretBackendSignObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SecretBackendSign is the Schema for the SecretBackendSigns API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type SecretBackendSign struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.backend)",message="backend is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.commonName)",message="commonName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.csr)",message="csr is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	Spec   SecretBackendSignSpec   `json:"spec"`
	Status SecretBackendSignStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecretBackendSignList contains a list of SecretBackendSigns
type SecretBackendSignList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecretBackendSign `json:"items"`
}

// Repository type metadata.
var (
	SecretBackendSign_Kind             = "SecretBackendSign"
	SecretBackendSign_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecretBackendSign_Kind}.String()
	SecretBackendSign_KindAPIVersion   = SecretBackendSign_Kind + "." + CRDGroupVersion.String()
	SecretBackendSign_GroupVersionKind = CRDGroupVersion.WithKind(SecretBackendSign_Kind)
)

func init() {
	SchemeBuilder.Register(&SecretBackendSign{}, &SecretBackendSignList{})
}
